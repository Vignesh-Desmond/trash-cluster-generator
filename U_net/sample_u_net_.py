# -*- coding: utf-8 -*-
"""Sample U-net .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rPBiW47cUhr7f6mLU7Hy8jTk-kXLW-LY
"""

from tensorflow.keras import layers
import tensorflow as tf
from keras.optimizers import SGD
from keras.initializers import random_normal 
import numpy as np

img_shape = (512,512,3)

def stdsel(kernel_size,feature_channels):
  (x,y) = kernel_size
  nodes = x*y*feature_channels
  return random_normal(stddev=(2//nodes)**0.5)

def DR():
  return np.random.rand(1)

#Downsampling

input = layers.Input(img_shape)

C1 = layers.Conv2D(filters=16,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),16))(input)
C1 = layers.Dropout(DR()[0])(C1)
C1 = layers.Conv2D(filters=16,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),16))(C1)
P1 = layers.MaxPool2D(pool_size=(2,2))(C1)

C2 = layers.Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),32))(P1)
C2 = layers.Dropout(DR()[0])(C2)
C2 = layers.Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),32))(C2)
P2 = layers.MaxPool2D(pool_size=(2,2))(C2)

C3 = layers.Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),64))(P2)
C3 = layers.Dropout(DR()[0])(C3)
C3 = layers.Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),64))(C3)
P3 = layers.MaxPool2D(pool_size=(2,2))(C3)

C4 = layers.Conv2D(filters=128,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),128))(P3)
C4 = layers.Dropout(DR()[0])(C4)
C4 = layers.Conv2D(filters=128,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),128))(C4)
P4 = layers.MaxPool2D(pool_size=(2,2))(C4)

C5 = layers.Conv2D(filters=256,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),256))(P4)
C5 = layers.Dropout(DR()[0])(C5)
C5 = layers.Conv2D(filters=256,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),256))(C5)

#Upsampling with tiling and feature concatenation by contracting path extrapolation

U6 = layers.Conv2DTranspose(filters=128,kernel_size=(2,2),padding='same',activation='relu',strides=(2,2),kernel_initializer = stdsel((2,2),128))(C5)
U6 = layers.concatenate([U6,C4])
C6 = layers.Conv2D(filters=128,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),128))(U6)
C6 = layers.Dropout(DR()[0])(C6)
C6 = layers.Conv2D(filters=128,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),128))(C6)

U7 = layers.Conv2DTranspose(filters=64,kernel_size=(2,2),padding='same',activation='relu',strides=(2,2),kernel_initializer = stdsel((2,2),64))(C6)
U7 = layers.concatenate([U7,C3],axis=-1)
C7 = layers.Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),64))(U7)
C7 = layers.Dropout(DR()[0])(C7)
C7 = layers.Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),64))(U7)

U8 = layers.Conv2DTranspose(filters=32,kernel_size=(2,2),padding='same',activation='relu',strides=(2,2),kernel_initializer = stdsel((2,2),32))(C7)
U8 = layers.concatenate([U8,C2],axis=-1)
C8 = layers.Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),32))(U8)
C8 = layers.Dropout(DR()[0])(C8)
C8 = layers.Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),32))(C8)

U9 = layers.Conv2DTranspose(filters=16,kernel_size=(2,2),padding='same',activation='relu',strides=(2,2),kernel_initializer = stdsel((2,2),16))(C8)
U9 = layers.concatenate([U9,C1],axis=-1)
C9 = layers.Conv2D(filters=16,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),16))(U9)
C9 = layers.Dropout(DR()[0])(C9)
C9 = layers.Conv2D(filters=16,kernel_size=(3,3),padding='same',activation='relu',kernel_initializer = stdsel((3,3),16))(C9)

Final = layers.Conv2D(filters=1,kernel_size=(1,1),padding='same',activation='relu',kernel_initializer = stdsel((1,1),1))(C9)


model = tf.keras.Model(inputs = [input],outputs=[Final])

model.compile(optimizer=SGD(learning_rate=0.01,momentum=0.99),loss='mse')

model.summary()

